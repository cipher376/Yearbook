import { PostPhotoLink, PostVideoLink, Audio, PostAudioLink } from './../../models/my-media';
import { UtilityService } from 'src/app/shared/services/providers/utility.service';
import { MediaService } from './../../shared/services/model-service/media.service';
import { MySignals } from 'src/app/shared/services/my-signals';
import { PostInterface } from './../../models/post';
import { ToasterService } from 'src/app/shared/services/providers/widgets/toaster.service';
import { UserService } from 'src/app/shared/services/model-service/user.service';
import { MyStorage } from 'src/app/shared/services/providers/storage/my-storage.service';
import { PostService } from './../../shared/services/model-service/post.service';
import { MyPhotoPickerComponent } from './../my-photo-picker/my-photo-picker.component';
import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import { Post } from 'src/app/models/post';
import { User } from 'src/app/models/user';
import { Photo, Video } from 'src/app/models/my-media';
import { AlertController } from '@ionic/angular';
import { MyVideoPickerComponent } from '../my-video-picker/my-video-picker.component';
import { MyAudioPickerComponent } from '../my-audio-picker/my-audio-picker.component';

@Component({
  selector: 'app-create-post',
  templateUrl: './create-post.component.html',
  styleUrls: ['./create-post.component.scss'],
})
export class CreatePostComponent implements OnInit, OnDestroy {
  mediaPage = '';

  message: string;
  user: User;
  userPost: Post;


  uploadSub$;
  sub$ = [];

  @ViewChild('myPhotoPicker') myPhotoPicker: MyPhotoPickerComponent;
  @ViewChild('myAudioPicker') myAudioPicker: MyAudioPickerComponent;
  @ViewChild('myVideoPicker') myVideoPicker: MyVideoPickerComponent;
  // @ViewChild('myDocumentPicker') myDocumentPicker: MyDocumentPickerComponent;

  constructor(
    private postService: PostService,
    private store: MyStorage,
    private userService: UserService,
    private toaster: ToasterService,
    private signals: MySignals,
    private mediaService: MediaService,
    public alertController: AlertController
  ) {

  }
  ngOnDestroy(): void {
    UtilityService.destroySubscription(this.sub$);
  }

  async ngOnInit() {
    this.userPost = {} as PostInterface;
    this.user = await this.userService.getUserLocal();
  }

  takePhoto() {
    this.mediaPage = 'photos';

  }
  recordVideo() {
    this.mediaPage = 'videos';
  }
  recordAudio() {
    this.mediaPage = 'audios';
  }

  clear() {
    this.mediaPage = '';
  }


  async postWithPhotos() {
    if (this.myPhotoPicker.galleryType === 'cloud') {

      // Create post with cloud photos
      // These are existing photos, so just create
      // virtual links among them.

      const links: PostPhotoLink[] = [];
      this.myPhotoPicker.selectedCloudPhotos.forEach(ph => {
        links.push({ photoId: ph?.id, postId: this.userPost?.id });
      });

      this.mediaService.linkPostToPhoto(links).subscribe(ln => {
        this.myPhotoPicker.selectedCloudPhotos = [];
        this.myPhotoPicker.loadCloudPhotos();
        this.mediaPage = '';
        console.log(ln);
      }, error => {
        console.log(error);
      });

    } else if (this.myPhotoPicker.galleryType === 'local') {
      // subscribe to all Photo upload
      // Signal generated by upload function in the my-photo-picker.component.ts file
      //
      this.uploadSub$ = this.signals.uploadCompleteSource$.subscribe(file => {
        console.log('Upload complete');
        const temPhoto = file as Photo;
        // post the message object and further post the photos
        // set owner Id
        // set post Id
        temPhoto.userId = this.user?.id;
        temPhoto.postId = this.userPost?.id;
        console.log(JSON.stringify(temPhoto));
        this.mediaService.createUserPhoto(this.user?.id, temPhoto).subscribe(photo => {
          console.log(JSON.stringify(photo));
          // TODO: Save to local repository
          //
        }, e => {
          console.log(JSON.stringify(e));
        });
      });

      // when all upload complete, do house keeping
      this.sub$.push(this.signals.allUploadCompleteSource$.subscribe(_ => {
        // reload cloud images
        this.myPhotoPicker.loadCloudPhotos();
        this.mediaPage = '';

      }));

      // Trigger upload event
      this.myPhotoPicker.uploadPhotos();
    }
  }

  postWithAudios() {
    if (this.myAudioPicker.galleryType === 'cloud') {
      // Create post  with cloud Audio
      // These are existing Audio, so just create
      // virtual links among them.
      const links: PostAudioLink[] = [];
      this.myAudioPicker.selectedCloudAudios.forEach(aud => {
        links.push({ audioId: aud?.id, postId: this.userPost?.id });
      });

      this.mediaService.linkPostToAudio(links).subscribe(ln => {
        this.myAudioPicker.selectedCloudAudios = [];
        this.myAudioPicker.loadCloudAudios();
        this.mediaPage = '';
        console.log(ln);
      }, error => {
        console.log(error);
      });
    } else if (this.myAudioPicker.galleryType === 'local') {
      // move audios to permanent storage folder
      // subscribe to all Photo upload
      // Signal generated by upload function in the my-photo-picker.component.ts file
      //
      this.uploadSub$ = this.signals.uploadCompleteSource$.subscribe(file => {
        console.log('Upload complete');
        const temAudio = file as Audio;
        // post the message object and further post the photos
        // set owner Id
        // set post Id
        temAudio.userId = this.user?.id;
        temAudio.postId = this.userPost?.id;
        console.log(JSON.stringify(temAudio));
        this.mediaService.createUserAudio(this.user?.id, temAudio).subscribe(aud => {
          console.log(JSON.stringify(aud));
          // TODO: Save to local repository
          //
        }, e => {
          console.log(JSON.stringify(e));
        });
      });

      // when all upload complete, do house keeping
      this.sub$.push(this.signals.allUploadCompleteSource$.subscribe(_ => {
        // reload cloud images
        this.myAudioPicker.loadCloudAudios();
        this.mediaPage = '';
      }));

      // Trigger upload event
      this.myAudioPicker.uploadAudios();

    }
  }

  async postWithVideos() {
    if (this.myVideoPicker.galleryType === 'cloud') {
      // Create post  with cloud videos
      // These are existing videos, so just create
      // virtual links among them.

      const links: PostVideoLink[] = [];
      this.myVideoPicker.selectedCloudVideos.forEach(vid => {
        links.push({ videoId: vid?.id, postId: this.userPost?.id });
      });

      this.mediaService.linkPostToVideo(links).subscribe(ln => {
        this.myVideoPicker.selectedCloudVideos = [];
        this.myVideoPicker.loadCloudVideos();
        this.mediaPage = '';
        console.log(ln);
      }, error => {
        console.log(error);
      });

    } else if (this.myVideoPicker.galleryType === 'local') {
      // move videos to permanent storage folder
      // subscribe to all Photo upload
      // Signal generated by upload function in the my-photo-picker.component.ts file
      //
      this.uploadSub$ = this.signals.uploadCompleteSource$.subscribe(file => {
        console.log('Upload complete');
        const temVideo = file as Video;
        // post the message object and further post the photos
        // set owner Id
        // set post Id
        temVideo.userId = this.user?.id;
        temVideo.postId = this.userPost?.id;
        console.log(JSON.stringify(temVideo));
        this.mediaService.createUserVideo(this.user?.id, temVideo).subscribe(video => {
          console.log(JSON.stringify(video));
          // TODO: Save to local repository
          //
        }, e => {
          console.log(JSON.stringify(e));
        });
      });

      // when all upload complete, do house keeping
      this.sub$.push(this.signals.allUploadCompleteSource$.subscribe(_ => {
        // reload cloud images
        this.myVideoPicker.loadCloudVideos();
        this.mediaPage = '';

      }));

      // Trigger upload event
      this.myVideoPicker.uploadVideos();
    }
  }

  async post() {
    // cancel all upload subscription
    UtilityService.destroySubscription(this.uploadSub$);
    this.userPost = await this.postMessage().catch(error => {
      this.toaster.toast('No connection');
    }) as any;
    if (!this.userPost?.id) {
      return;
    }

    if (this.mediaPage === 'photos') {
      console.log('Posting with images');
      if (this.myPhotoPicker?.devicePhotos?.length < 1 && this.myPhotoPicker?.selectedCloudPhotos?.length < 1) { // no photo, prompt user
        const alert = await this.alertController.create({
          cssClass: '',
          header: 'Confirm',
          subHeader: '',
          message: 'Post message without photos?',
          buttons: [
            {
              text: 'No',
              role: 'cancel',
              cssClass: 'secondary',
              handler: (blah) => {
                this.toaster.toast('Please select photos to post');
              }
            }, {
              text: 'Yes',
              handler: () => {
                this.postWithPhotos().then(_ => _); // go ahead; post the message
              }
            }
          ]
        });
        await alert.present();
      } else {
        this.postWithPhotos().then(_ => _); // go ahead; post the message
      }

    } else if (this.mediaPage === 'videos') {
      console.log('Posting with videos');
      this.postWithVideos();
    } else if (this.mediaPage === 'audios') {
      console.log('Posting with audios');
      this.postWithAudios();
    } else {
      // post message without media
      this.postMessage().then(_ => {
        if (_) {
          this.message = '';
          this.toaster.toast('Your post is sent.');
        }
      });
    }
  }

  async postMessage() {
    this.userPost = {} as PostInterface;
    if (!this.message) {
      await this.toaster.toast('Please say something!');
      return;
    }
    this.userPost.userId = this.user?.id;
    this.userPost.message = this.message;
    return this.postService.creatPost(this.userPost).toPromise().then(post => {
      this.userPost = post;
      if (post) {
        this.message = '';
        this.toaster.toast('Your post is sent.');
      }
      return post;
    });
  }

}
